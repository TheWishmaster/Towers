
total_towers = 8
towers_owners = {}
walls_defence = {}
current_tower = 1
left_tower = total_towers
right_tower = 2
current_tower_enemy = 5
left_tower_enemy = 6
right_tower_enemy = 4
defence_limit = 10
capture_limit = 50
mana_points = 0
mana_delta = 0
controlled_towers = 0
controlled_towers_enemy = 0

local counter
local number_nodes_names = {"progress left", "progress right",
	"inside defence left", "inside defence right",
	"outside defence left", "outside defence right"}
local capture_left_open = 0
local capture_right_open = 0
local capture_left_open_enemy = 0
local capture_right_open_enemy = 0
local defend_left_open = 0
local defend_right_open = 0


function clear(self, move)
	for i, val in pairs(number_nodes_names) do
		gui.set_text(gui.get_node(val), "0")
	end
	gui.set_text(gui.get_node("Tower number"), 
		tostring(current_tower))
	gui.set_text(gui.get_node("inside defence left"), 
		tostring(walls_defence[current_tower][left_tower]))
	gui.set_text(gui.get_node("outside defence left"), 
		tostring(walls_defence[left_tower][current_tower]))
	gui.set_text(gui.get_node("inside defence right"), 
		tostring(walls_defence[current_tower][right_tower]))
	gui.set_text(gui.get_node("outside defence right"), 
		tostring(walls_defence[right_tower][current_tower]))
	capture_left_open = 0
	capture_right_open = 0
	defence_left_open = 0
	defence_right_open = 0
	self.capt_l_cor = coroutine.create(sequence)
	self.capt_r_cor = coroutine.create(sequence)
	self.def_r_cor = coroutine.create(sequence)
	self.def_l_cor = coroutine.create(sequence)
    args = {}
    defence_mask = {}
    for i = current_tower, total_towers do
    	if towers_owners[i] == 1 then
    		table.insert(args, hash("player_tower"))
    	else 
	    	if towers_owners[i] == -1 then
	    		table.insert(args, hash("tower"))
	    	else
    			table.insert(args, hash("tower_neutral"))
    		end
    	end
    	if (walls_defence[i][(i - 2 + total_towers) % total_towers + 1] == defence_limit) then
    		print("1");
    	   	table.insert(defence_mask, 1);
    	else 
    		table.insert(defence_mask, 0);
    	end
    	if (walls_defence[i][i % total_towers + 1] == defence_limit) then
    		print("2");
    	   	table.insert(defence_mask, 1);
    	else 
    		table.insert(defence_mask, 0);
    	end
    end
    for i = 1, current_tower - 1 do
    	if towers_owners[i] == 1 then
    		table.insert(args, hash("player_tower"))
    	else 
	    	if towers_owners[i] == -1 then
	    		table.insert(args, hash("tower"))
	    	else
    			table.insert(args, hash("tower_neutral"))
    		end
    	end
    	if (walls_defence[i][(i - 2 + total_towers) % total_towers + 1] == defence_limit) then
    		print("1");
    	   	table.insert(defence_mask, 1);
    	else 
    		table.insert(defence_mask, 0);
    	end
    	if (walls_defence[i][i % total_towers + 1] == defence_limit) then
    		print("2");
    	   	table.insert(defence_mask, 1);
    	else 
    		table.insert(defence_mask, 0);
    	end
    end
    msg.post("main:/go", "rebuild", {args, total_towers, move, defence_mask})
end	

function go_left(self)
	current_tower = left_tower;
	left_tower = (total_towers - 2 + left_tower) % total_towers + 1;
	right_tower = (total_towers - 2 + right_tower) % total_towers + 1;
	towers_owners[current_tower] = 1;
	clear(self, 1)
end

function go_right(self)
	current_tower = right_tower;
	left_tower = (left_tower) % total_towers + 1;
	right_tower = (right_tower) % total_towers + 1;
	towers_owners[current_tower] = 1;
	clear(self, 1)
end

function go_left_enemy(self)
	current_tower_enemy = left_tower_enemy;
	left_tower_enemy = (total_towers - 2 + left_tower_enemy) % total_towers + 1;
	right_tower_enemy = (total_towers - 2 + right_tower_enemy) % total_towers + 1;
	towers_owners[current_tower] = -1;
	clear(self, 1)
end

function go_right_enemy(self)
	current_tower_enemy = right_tower_enemy;
	left_tower_enemy = (left_tower_enemy) % total_towers + 1;
	right_tower_enemy = (right_tower_enemy) % total_towers + 1;
	towers_owners[current_tower_enemy] = -1;
	clear(self)
end

function sequence(self, slowdown)
	if slowdown == nil then
		slowdown = 1
	end
	for i = 1, capture_limit * slowdown do
		coroutine.yield(math.floor(i / slowdown))
	end
	return capture_limit
end

function mana_sequence(self)
	sum = 0
	for i = 1, 1000000007 do
		sum = sum + controlled_towers
		if (mana_delta ~= 0) then
			sum = sum + 200 * mana_delta
			mana_delta = 0
			print("!!!")
		end
		coroutine.yield(math.floor(sum / 200))
	end
	return 1000000007
end

function init(self)
    for i = 1, total_towers do
    	towers_owners[i] = 0
    	walls_defence[i] = {}
    	for j = 1, total_towers do
    		walls_defence[i][j] = 0
    	end
    end
    towers_owners[current_tower] = 1
    towers_owners[current_tower_enemy] = -1
	self.current_mana = coroutine.create(mana_sequence);
    msg.post(".", "acquire_input_focus")
    clear(self)
    counter = 1
end

function increase_defence(self, left, right)
	if walls_defence[left][right] < defence_limit then
		walls_defence[left][right] = walls_defence[left][right] + 1
	else
		defend_left_open = 0
		defend_right_open = 0
	end
	clear(self)
end

function update(self, dt)
	controlled_towers = 0
	for i = 1, total_towers do
		if towers_owners[i] == 1 then
			controlled_towers = controlled_towers + 1
		end
	end
	if controlled_towers == total_towers then
		msg.post("@system:", "exit", {code = 0})
	end
	controlled_towers_enemy = 0
	for i = 1, total_towers do
		if towers_owners[i] == 1 then
			controlled_towers_enemy = controlled_towers_enemy + 1
		end
	end
	if controlled_towers_enemy == total_towers then
		msg.post("@system:", "exit", {code = 0})
	end
	if capture_left_open_enemy == 0 and capture_right_open_enemy == 0 then
		if (math.random(1, 2) == 1) then
			capture_right_open_enemy = 1
			self.capt_en = coroutine.create(sequence)
		else
			capture_left_open_enemy = 1
			self.capt_en = coroutine.create(sequence)
		end
	end
	if capture_left_open_enemy > 0 then
		local status, cnt = coroutine.resume(self.capt_en, 
			self, walls_defence[left_tower_enemy][current_tower_enemy] + 1)
		if status == 0 then
			capture_left_open_enemy = 0
			go_left_enemy(self)
		end
	end
	if capture_right_open_enemy > 0 then
		local status, cnt = coroutine.resume(self.capt_en, 
			self, walls_defence[right_tower_enemy][current_tower_enemy] + 1)
		if status == 0 then
			capture_right_open_enemy = 0
			go_right_enemy(self)
		end
	end
	if capture_left_open > 0 then
		local cur_def = walls_defence[left_tower][current_tower] + 1
		if towers_owners[left_tower] == towers_owners[current_tower] then
			cur_def = 1
		end
		local status, cnt = coroutine.resume(self.capt_l_cor, 
			self, cur_def)
		if status then
			gui.set_text(gui.get_node("progress left"), tostring(cnt))
		else
			go_left(self)
		end
	end
	if capture_right_open > 0 then
		local cur_def = walls_defence[right_tower][current_tower] + 1
		if towers_owners[right_tower] == towers_owners[current_tower] then
			cur_def = 1
		end
		local status, cnt = coroutine.resume(self.capt_r_cor, 
			self, cur_def)
		if status then
			gui.set_text(gui.get_node("progress right"), tostring(cnt))
		else
			go_right(self)
		end
	end
	if defend_left_open > 0 then
		increase_defence(self, current_tower, left_tower)
	end
	if defend_right_open > 0 then
		increase_defence(self, current_tower, right_tower)
	end
	local status
	status, mana_points = coroutine.resume(self.current_mana, self);
	gui.set_text(gui.get_node("mana"), 
		tostring(mana_points))
end

function on_input(self, action_id, action)
	if action_id == hash("click") and 
		gui.pick_node(gui.get_node("move left"), action.x, action.y) then
		clear(self)
		capture_left_open = 1
	end
	if action_id == hash("click") and 
		gui.pick_node(gui.get_node("move right"), action.x, action.y) then
		clear(self)
		capture_right_open = 1
	end
	if action_id == hash("click") and 
		gui.pick_node(gui.get_node("defend left"), action.x, action.y) then
		clear(self)
		defend_left_open = 1
	end
	if action_id == hash("click") and 
		gui.pick_node(gui.get_node("defend right"), action.x, action.y) then
		clear(self)
		defend_right_open = 1
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("teleport") then
		if mana_points >= 3 and message[1] ~= current_tower_enemy then
			mana_delta = -3
			current_tower = message[1]
			left_tower = (current_tower + total_towers - 2) % total_towers + 1;
			right_tower = (right_tower) % total_towers + 1;
			towers_owners[current_tower] = 1;
			clear(self)
		end
	end
end
